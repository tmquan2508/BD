import com.tmquan2508.gradle.InjectConfig

plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id("com.gradleup.shadow") version "9.1.0"
}

version = '2.0.0'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT")
    compileOnly("org.apache.logging.log4j:log4j-api:2.17.1")
    compileOnly("org.apache.logging.log4j:log4j-core:2.17.1")
    compileOnly("org.yaml:snakeyaml:2.0")
    compileOnly("org.apache.commons:commons-lang3:3.12.0")
    implementation("org.ow2.asm:asm:9.5")
    implementation("org.ow2.asm:asm-tree:9.5")
    implementation("org.ow2.asm:asm-commons:9.5")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.register('injectConfig', InjectConfig) {
    targetClass = 'com.tmquan2508.exploit.Config'
    classesDir.set(layout.buildDirectory.dir('classes/java/main'))
    outputClassesDir.set(layout.buildDirectory.dir('classes/java/main'))
}

tasks.named('injectConfig').configure {
    mustRunAfter(tasks.named('compileJava'))
}

tasks.named("jar") {
    dependsOn(tasks.named("injectConfig"))
}

tasks.named("shadowJar") {
    dependsOn(tasks.named("injectConfig"))
}

tasks {
    runServer {
        minecraftVersion("1.21")
    }
}

tasks.shadowJar {
    //archiveClassifier.set('')
}

tasks.register('minimize', Jar) {
    dependsOn tasks.named('shadowJar')

    archiveClassifier.set('min')
    from(zipTree(tasks.shadowJar.archiveFile)) {
        exclude 'com/tmquan2508/bd/BD.class'
        exclude 'com/tmquan2508/bd/BD$*.class'
        exclude 'com/tmquan2508/exploit/Config.class'
        exclude 'com/tmquan2508/exploit/Config$*.class'
    }

    onlyIf { gradle.startParameter.taskNames.contains('minimize') }
}

build {
    dependsOn shadowJar
}

artifacts {
    archives shadowJar
}