import java.util.zip.ZipFile
import java.util.jar.Manifest
import com.tmquan2508.buildtools.InjectClassList

plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id("com.gradleup.shadow") version "9.0.0-rc2"
}

group = 'com.tmquan2508'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT")
    compileOnly("org.apache.logging.log4j:log4j-api:2.17.1")
    compileOnly("org.apache.logging.log4j:log4j-core:2.17.1")
    compileOnly("org.yaml:snakeyaml:2.0")
    compileOnly("org.apache.commons:commons-lang3:3.12.0")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.register('injectClassList', InjectClassList) {
    dependsOn tasks.named('classes')

    def classesOutput = sourceSets.main.output.classesDirs.singleFile
    classesDir.set(classesOutput)
    outputClassesDir.set(classesOutput)
    searchPrefix.set("com/tmquan2508/exploit/")
    configClassName.set("com.tmquan2508.exploit.Config")
    placeholder.set("::CLASSLIST::")
}

tasks.named('jar') {
    dependsOn(tasks.named('injectClassList'))
}

tasks.shadowJar {
    dependsOn(tasks.named('injectClassList'))

    doLast {
        def shadowedJarFile = archiveFile.get().asFile
        def searchPrefix = "com/tmquan2508/exploit/"

        List<String> classNames = []
        zipTree(shadowedJarFile).matching {
            include "**/*.class"
        }.each { file ->
            def normalizedPath = file.path.replace(File.separatorChar, '/' as char)
            def index = normalizedPath.indexOf(searchPrefix)
            if (index != -1) {
                def trimmed = normalizedPath.substring(index + searchPrefix.length())
                classNames.add(trimmed)
            }
        }
        classNames.sort()

        if (classNames.isEmpty()) {
            println "No matching classes found to create a payload. Skipping."
            return
        }

        byte[] payloadBytes
        new ByteArrayOutputStream().withStream { baos ->
            new DataOutputStream(baos).withStream { dos ->
                classNames.each { className ->
                    byte[] lineBytes = className.getBytes("UTF-8")
                    dos.writeInt(lineBytes.length)
                    dos.write(lineBytes)
                }
            }
            payloadBytes = baos.toByteArray()
        }
        
        def payloadBase64 = payloadBytes.encodeBase64().toString()
        def tempManifestFile = file("$buildDir/tmp/MANIFEST.MF")
        tempManifestFile.parentFile.mkdirs()

        def jar = new ZipFile(shadowedJarFile)
        def manifestEntry = jar.getEntry("META-INF/MANIFEST.MF")
        def manifest = new Manifest(manifestEntry != null ? jar.getInputStream(manifestEntry) : new ByteArrayInputStream("Manifest-Version: 1.0\n".getBytes()))
        jar.close()

        manifest.getMainAttributes().putValue("X-Payload-Data", payloadBase64)

        tempManifestFile.withOutputStream { os ->
            manifest.write(os)
        }

        ant.zip(destfile: shadowedJarFile, update: true) {
            zipfileset(file: tempManifestFile, fullpath: 'META-INF/MANIFEST.MF')
        }
        
        println "-> Build completed. Payload embedded in MANIFEST.MF (standard compliant)."
    }
}

build {
    dependsOn shadowJar
}

artifacts {
    archives shadowJar
}